name: Publish docker image

on:
  workflow_dispatch:
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3 | cut -c 2-)
      - name: Publish to Docker Hub Registry
        uses: jerray/publish-docker-action@master
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: drill4j/admin-ui-root-config
          tags: latest,${{ steps.get_version.outputs.VERSION }}
          build_args: ENV=development,VERSION=${{ steps.get_version.outputs.VERSION }}
      - name: Publish to GitHub Container registry
        uses: jerray/publish-docker-action@master
        with:
          username: ${{ secrets.GH_PACKAGE_USERNAME }}
          password: ${{ secrets.GH_PACKAGE_TOKEN }}
          registry: ghcr.io
          repository: drill4j/admin-ui-root-config
          tags: latest,${{ steps.get_version.outputs.VERSION }}
          build_args: ENV=development,VERSION=${{ steps.get_version.outputs.VERSION }}
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v1
        with:
          repository: Drill4J/e2e
          token: ${{ secrets.VEE_TABLE_TOKEN }}
          event-type: run_test
          client-payload: '{ "${{ github.event.repository.name }}": "${{ steps.get_version.outputs.VERSION }}" }'
      # # place this action LAST
      # - uses: Drill4J/vee-table@0.0.0
      #   with:
      #     # leave everything "as-is"
      #     github-access-token: ${{ secrets.VEE_TABLE_TOKEN }}
      #     action-type: 'add-version'
      #     ledger-repo-url: 'https://github.com/Drill4J/vee-ledger'
      #     ledger-repo-owner: 'Drill4J'
      #     ledger-repo-name: 'vee-ledger'
      #     version-component-id: ${{ github.event.repository.name }}
      #     # leave everything "as-is"

      #     # steps.build_artifact is your step, where new version tag is created
      #     version-tag: ${{ steps.get_version.outputs.VERSION }} # Pass new version tag
